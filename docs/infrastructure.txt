**Redis and Sentinel Configuration**

We recommend using at least Redis version 2.6.13. 

For testing you need a minimum of two sentinels and two redis instances (one master and one slave) to test fail over. 

For production we recommend at least two servers. Each server should run two sentinels and at least one master and one slave redis instance, running on opposite servers.

    |   Server One   |    |   Server Two   |
    |----------------|    |----------------|
    | Sentinel01     |    | Sentinel03     |
    | Sentinel02     |    | Sentinel04     |
    | Redis01-Master |    | Redis01-Slave  |
    | Redis02-Slave  |    | Redis02-Master |
    | ...            |    | ...            |

**Important:** If you are running on AWS please ensure your django servers can connect to the internal IP of the AWS redis servers. AWS ec2 instances resolve to their internal IP which results in sentinels returning the internal IP when queried. To check the IP address of redis instances run the following command:   
    
    redis-cli -p <SENTINEL PORT, e.g. 26379> sentinel masters

Example Sentinel Configuration:

    port  26379 #Sentinel Port    

    sentinel monitor redis-Redis1 server1.com 6382 2
    sentinel down-after-milliseconds redis-Redis1 60000 
    sentinel failover-timeout redis-Redis1 900000 
    sentinel can-failover redis-Redis1 yes 
    sentinel parallel-syncs redis-Redis1 1 

    sentinel monitor redis-Redis2 server2.com 6383 2 
    sentinel down-after-milliseconds redis-Redis2 60000 
    sentinel failover-timeout redis-Redis2 900000 
    sentinel can-failover redis-Redis2 yes 
    sentinel parallel-syncs redis-Redis2 1 

Please check the redis documentation for more details on Redis and Sentinel installation and configuration. 

We also recommend using Supervisor or similar to manage the various Redis and Sentinel instances. 










